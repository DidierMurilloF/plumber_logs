# Packages ----
# For API
library(plumber)
library(rapidoc)
# For model predictions
library(parsnip)
library(ranger)
install.packages("rapidoc")
install.packages("ranger")
install.packages("ranger")
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/ranger_0.13.1.zip", lib = .libPaths())
.libPaths()
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/rapidoc_8.4.3.zip")
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/rapidoc_8.4.3.zip", lib = .libPaths()[1])
# Packages ----
# For API
library(plumber)
library(rapidoc)
# For model predictions
library(parsnip)
library(ranger)
model
readr::read_rds("model.rds")
# Load model ----
model <- readr::read_rds("models/model.rds")
model
jsonlite::fromJSON()
jsonlite::rbind_pages()
jsonlite::read_json("penguins.json",simplifyVector = TRUE)
Goal ----
predict(model, new_data = jsonlite::read_json("penguins.json",simplifyVector = TRUE), type = "prob")
predict(model, new_data = jsonlite::read_json("penguins.json",simplifyVector = TRUE), type = "prob")
function() {
list(status = "All Good",
time = Sys.time())
}
plumb(file='plumber.R')$run()
renv::snapshot(confirm = FALSE)
install.packages("yaml")
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/yaml_2.2.1.zip", lib = .libPaths()[1])
yaml::read_yaml
yaml::read_yaml("openapi.yaml"))
library(data.table)
renv::snapshot(confirm = FALSE)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
browseURL(rapidoc_index())
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
hola = 24
hola
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
renv::install("fs")
library(plumber)
library(logger)
library(glue)
library(fs)
library(logger)
renv::install("https://cran.r-project.org/bin/windows/contrib/4.1/fs_1.5.0.zip")
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/fs_1.5.0.zip", lib = .libPaths()[1])
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/logger_0.2.1.zip", lib = .libPaths()[1])
library(plumber)
library(logger)
library(glue)
# Path for log files
log_path <- "logs"
log_path
dir.exists("models")
# Create log file directory if it doesn't exist
if (!fs::dir_exists(log_path)) fs::dir_create(log_path)
# Send logs both to stdout and the log directory
log_appender(appender_tee(tempfile("plumber_", log_path, ".log")))
plumb(file='plumberlog.R')$run()
tempfile("plumber_", log_path, ".log")
log_path
tempfile("plumber_", log_path, ".log")
tempfile("plumber_", log_path, ".log")
tempdir()
tempdir()
tempfile("plumber_", log_path, ".log")
log_path
tempfile("plumber_", log_path, ".log")
tempfile("plumber_", log_path, ".log")
system.time()
tempfile("plumber_",Sys.Date(), ".log")
Sys.Date()
tempfile("plumber_",Sys.Date(),".log")
tempfile("plumber_", log_path,".log")
paste0("logs\\",Sys.Date())
paste0("logs\\",Sys.Date(),".log")
appender_tee(paste0("logs\\",Sys.Date(),".log"))
# Send logs both to stdout and the log directory
log_appender(appender_tee(paste0("logs\\",Sys.Date(),".log")))
plumb(file='plumberlog.R')$run()
x <- "A test string"
(y <- charToRaw(x))
is.vector(y) # TRUE
Sys.Date()
Sys.timezone()
Sys.time()
t <- tempfile()
log_appender(appender_tee(t))
log_info(42)
log_info(42:44)
readLines(t)
t
t <- tempfile()
log_appender(appender_console)
log_appender(appender_file(t), index = 2)
log_info(42)
readLines(t)
tempfile("plumber_", log_path,".log")
log_path
tempfile("plumber_16-09-2021", log_path,".log")
plumber::plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
logs <- readr::read_log(file = "logs/plumber_5da83e766858.log",
col_names = c("log_level",
"timestamp",
"remote_addr",
"user_agent",
"host",
"method",
"endpoint",
"status",
"execution_time"))
logs
logs$method
logs[logs$method == "POST",]
